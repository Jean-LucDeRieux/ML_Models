{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic Nerual Network\n",
    "Followed tutioral from:\n",
    "https://www.youtube.com/watch?v=VMj-3S1tku0&t=2143s&ab_channel=AndrejKarpathy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Libraries to be install\n",
    "import numpy as np\n",
    "import math\n",
    "import graphviz as gv\n",
    "from graphviz import Digraph\n",
    "import random\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "random.seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class perceptron:\n",
    "    def __init__(self, x):\n",
    "        self.value = 0.0 + x\n",
    "        self.children = []\n",
    "        self.parents = []\n",
    "\n",
    "    def add_child(self, child):\n",
    "        self.children.append(child)\n",
    "        child.parents.append([self, random.uniform(-1,1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class nerualNetwork:\n",
    "    def __init__(self, numIn, numLayers, numOut, actFunc, lossFunc, bias):\n",
    "        self.numIn = numIn\n",
    "        self.numLayers = numLayers \n",
    "        self.numOut = numOut\n",
    "        self.inputs = []\n",
    "        self.outputs = []\n",
    "        self.actFunc = actFunc\n",
    "        self.lossFunc = lossFunc\n",
    "        self.bias = bias\n",
    "        self.construct()\n",
    "\n",
    "    def copy(self):\n",
    "        import copy\n",
    "        return copy.deepcopy(self)\n",
    "    \n",
    "    def construct(self):\n",
    "        def create_nodes(num):\n",
    "            return [perceptron(0) for _ in range(num)]\n",
    "\n",
    "        def connect(lstOne, lstTwo):\n",
    "            for node1 in lstOne:\n",
    "                for node2 in lstTwo:\n",
    "                    node1.add_child(node2)\n",
    "            return lstOne\n",
    "\n",
    "        self.inputs = create_nodes(self.numIn)\n",
    "        self.outputs = create_nodes(self.numOut)\n",
    "\n",
    "        layers = [create_nodes(n) for n in self.numLayers]\n",
    "\n",
    "        if len(layers) == 0:\n",
    "            connect(self.inputs, self.outputs)\n",
    "        else:\n",
    "            connect(self.inputs, layers[0])\n",
    "            for i in range(len(layers) - 1):\n",
    "                connect(layers[i], layers[i+1])\n",
    "            connect(layers[-1], self.outputs)\n",
    "\n",
    "    def print_weights(self):\n",
    "        print(\"Weights from inputs to hidden layer:\")\n",
    "        for node in self.inputs:\n",
    "            for child in node.children:\n",
    "                weight = [parent[1] for parent in child.parents if parent[0] == node][0]\n",
    "                print(weight)  # print weight\n",
    "\n",
    "        print(\"Weights from hidden layer to output layer:\")\n",
    "        for node in self.outputs:\n",
    "            for parent in node.parents:\n",
    "                print(parent[1])  # print weight\n",
    "\n",
    "    def forwardProp(self, inpts, labels):\n",
    "        for i in range(len(self.inputs)):\n",
    "            self.inputs[i].value = inpts[i]\n",
    "            \n",
    "        def DFS_forward(node):\n",
    "            # Get list of the current children\n",
    "            lstChildren = node.children #[sublist[0] for sublist in node.children]\n",
    "            # Print the child Val & Grad and decend back down\n",
    "            for child in lstChildren:\n",
    "                values = [sublist[0].value for sublist in child.parents]\n",
    "                weights = [sublist[1] for sublist in child.parents]\n",
    "                x = np.dot(values, weights) #+ self.bias\n",
    "                if self.actFunc == \"Sigmoid\":\n",
    "                    x = 1 / (1 + np.exp(-x))\n",
    "                elif self.actFunc == \"ReLU\":\n",
    "                    x = np.maximum(0, x)\n",
    "                elif self.actFunc == \"Softplus\":\n",
    "                    x = np.log(1 + np.exp(x))\n",
    "                child.value = x\n",
    "                DFS_forward(child)\n",
    "\n",
    "        for n in self.inputs:\n",
    "            DFS_forward(n)\n",
    "        \n",
    "        loss = 0\n",
    "        # Calculate loss\n",
    "        if self.lossFunc == \"CrossEntropy\":\n",
    "            # Binary Cross-Entropy Loss\n",
    "            loss = [-label[0] * np.log(output.value + 1e-7) - (1 - label[0]) * np.log(1 - output.value + 1e-7) \n",
    "                    for output, label in zip(self.outputs, labels)]\n",
    "        elif self.lossFunc == \"MSE\":\n",
    "            # # Mean Squared Error Loss\n",
    "            # for outputx, labelx in zip(self.outputs, labels):\n",
    "            #     print(\"HERE1\",outputx.value )\n",
    "            #     print(\"HERE2\", labelx)\n",
    "\n",
    "            loss = [0.5 * np.power((output.value - label[0]), 2)\n",
    "                    for output, label in zip(self.outputs, labels)]\n",
    "        \n",
    "        return loss\n",
    "\n",
    "    def backwardProp(self, labels, r):\n",
    "        def DFS_backward(node, label, r):\n",
    "            # Get list of the current children\n",
    "            pairsParents = node.parents\n",
    "            # Print the child Val & Grad and decend back down\n",
    "            for pair in pairsParents:\n",
    "                newWeight = 0\n",
    "                a0 = node.value\n",
    "                a1 = pair[0].value\n",
    "                w = pair[1]\n",
    "                grad = 0\n",
    "                if self.actFunc == \"Sigmoid\": \n",
    "                    sigmoid_derivative = a0 * (1 - a0)\n",
    "                    if self.lossFunc == \"CrossEntropy\":\n",
    "                        grad = a0 - label\n",
    "                    elif self.lossFunc == \"MSE\":\n",
    "                        grad = 2 * (a0 - label)\n",
    "                    newWeight = w - r * grad * sigmoid_derivative\n",
    "                elif self.actFunc == \"ReLU\":\n",
    "                    relu_derivative = np.where(a1 > 0, 1, 0)\n",
    "                    if self.lossFunc == \"CrossEntropy\":\n",
    "                        grad = a0 - label\n",
    "                    elif self.lossFunc == \"MSE\":\n",
    "                        grad = 2 * (a0 - label)\n",
    "                    newWeight = w - r * grad * relu_derivative\n",
    "                elif self.actFunc == \"Softplus\":\n",
    "                    softplus_derivative = 1 / (1 + np.exp(-a1))\n",
    "                    if self.lossFunc == \"CrossEntropy\":\n",
    "                        grad = a0 - label\n",
    "                    elif self.lossFunc == \"MSE\":\n",
    "                        grad = 2 * (a0 - label)\n",
    "                    newWeight = w - r * grad * softplus_derivative\n",
    "\n",
    "\n",
    "                pair[1] = newWeight  # update weight\n",
    "\n",
    "            # Check for numerical stability before updating bias\n",
    "            parent_values = [pair[0].value for pair in pairsParents]\n",
    "            if np.all(np.isfinite(parent_values)) and len(parent_values) != 0:\n",
    "                self.bias -= r * np.mean(parent_values)\n",
    "\n",
    "            for pair in pairsParents:\n",
    "                DFS_backward(pair[0],label,r)\n",
    "\n",
    "        # Compute the gradient of the loss function\n",
    "        if self.lossFunc == \"CrossEntropy\":\n",
    "            grad = [output.value - label for output, label in zip(self.outputs, labels)]\n",
    "        elif self.lossFunc == \"MSE\":\n",
    "            grad = [2 * (output.value - label) for output, label in zip(self.outputs, labels)]\n",
    "\n",
    "        # Propagate the gradient back through the network\n",
    "        for node, g in zip(self.outputs, grad):\n",
    "            DFS_backward(node, g, r)\n",
    "        \n",
    "    def train(self, inputs, labels, r, epochs):\n",
    "        loss_time_pairs = []\n",
    "        start_time = time.time() * 1000  # record start time in milliseconds\n",
    "        for _ in range(epochs):\n",
    "            for input, label in zip(inputs, labels):\n",
    "                loss = self.forwardProp(input, labels)\n",
    "                elapsed_time_in_ms = time.time() * 1000 - start_time  # calculate elapsed time\n",
    "                loss_time_pairs.append((loss, elapsed_time_in_ms))\n",
    "                self.backwardProp(label, r)\n",
    "        return loss_time_pairs\n",
    "\n",
    "    def predict(self, inputs):\n",
    "        self.forwardProp(inputs,[])\n",
    "        return [node.value for node in self.outputs]\n",
    "    \n",
    "    def trace(self):\n",
    "        nodes, edges = set(), set()\n",
    "        visited = set()\n",
    "\n",
    "        def build(node):\n",
    "            if node not in visited:\n",
    "                visited.add(node)\n",
    "                nodes.add(node)\n",
    "                for child in node.children:\n",
    "                    edges.add((child, node))\n",
    "                    build(child)\n",
    "\n",
    "        for root in self.inputs:\n",
    "            build(root)\n",
    "\n",
    "        return nodes, edges\n",
    "\n",
    "    def draw_dot(self):\n",
    "        dot = Digraph(format='svg', graph_attr={'rankdir': 'LR'})  # LR = left to right\n",
    "\n",
    "        nodes, edges = self.trace()\n",
    "        for node in nodes:\n",
    "            dot.node(name=str(id(node)), label=f\"value: {node.value:.4f}\", shape='circle')\n",
    "\n",
    "        for child, parent in edges:\n",
    "            weight = next(w for n, w in child.parents if n == parent)\n",
    "            dot.edge(str(id(parent)), str(id(child)), label=f\"w: {weight:.4f}\")\n",
    "\n",
    "        return dot\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Graphing Function\n",
    "def trace(roots):\n",
    "    nodes, edges = set(), set()\n",
    "    visited = set()\n",
    "\n",
    "    def build(v):\n",
    "        if v not in visited:\n",
    "            visited.add(v)\n",
    "            nodes.add(v)\n",
    "            for child in reversed(v.children):\n",
    "                edges.add((child, v))\n",
    "                build(child)\n",
    "\n",
    "    for root in roots:\n",
    "        build(root)\n",
    "\n",
    "    return nodes, edges\n",
    "\n",
    "def draw_dot(roots):\n",
    "    dot = Digraph(format='svg', graph_attr={'rankdir': 'LR'})  # LR = left to right\n",
    "\n",
    "    nodes, edges = trace(roots)\n",
    "    for n in nodes:\n",
    "        uid = str(id(n))\n",
    "        # for any value in the graph, create a rectangular ('record') node for it\n",
    "        dot.node(name=uid, label=\"value: %.4f\" % (n.value), shape='circle', width='1.0', height='1.0')\n",
    "    x = 1\n",
    "    for n1, n2 in edges:\n",
    "        \n",
    "        # connect n1 to n2\n",
    "        weights1 = [sublist[1] for sublist in n1.parents]\n",
    "        nodeP1 = [sublist[0] for sublist in n1.parents]\n",
    "        weight = 0\n",
    "        for index, parent in enumerate(nodeP1):\n",
    "            if parent == n2:\n",
    "                weight = weights1[index]\n",
    "\n",
    "        edge_label = \"w: %.4f\" % weight\n",
    "        dot.edge(str(id(n2)), str(id(n1)), label=edge_label)\n",
    "        x+=1\n",
    "\n",
    "    return dot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 8.1.0 (20230707.0739)\n",
       " -->\n",
       "<!-- Pages: 1 -->\n",
       "<svg width=\"470pt\" height=\"215pt\"\n",
       " viewBox=\"0.00 0.00 470.04 215.01\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 211.01)\">\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-211.01 466.04,-211.01 466.04,4 -4,4\"/>\n",
       "<!-- 2420130501200 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>2420130501200</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"231.02\" cy=\"-159.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"231.02\" y=\"-153.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130046672 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>2420130046672</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"415.03\" cy=\"-102.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"415.03\" y=\"-96.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130501200&#45;&gt;2420130046672 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>2420130501200&#45;&gt;2420130046672</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M276.08,-145.21C301.16,-137.35 332.78,-127.45 359.43,-119.11\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"360.25,-122.2 368.74,-115.87 358.16,-115.52 360.25,-122.2\"/>\n",
       "<text text-anchor=\"middle\" x=\"323.02\" y=\"-140.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.9000</text>\n",
       "</g>\n",
       "<!-- 2420130500816 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>2420130500816</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"231.02\" cy=\"-47.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"231.02\" y=\"-41.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130500816&#45;&gt;2420130046672 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>2420130500816&#45;&gt;2420130046672</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M276.54,-60.46C301.54,-68.01 332.92,-77.5 359.39,-85.5\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"358.06,-89.05 368.65,-88.6 360.09,-82.35 358.06,-89.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"323.02\" y=\"-84.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.3000</text>\n",
       "</g>\n",
       "<!-- 2420130193616 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2420130193616</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-160.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-154.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130193616&#45;&gt;2420130501200 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>2420130193616&#45;&gt;2420130501200</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M94.41,-159.75C118.26,-159.62 147.55,-159.46 172.79,-159.32\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"172.72,-162.82 182.7,-159.26 172.68,-155.82 172.72,-162.82\"/>\n",
       "<text text-anchor=\"middle\" x=\"139.01\" y=\"-161.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.4000</text>\n",
       "</g>\n",
       "<!-- 2420130193616&#45;&gt;2420130500816 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>2420130193616&#45;&gt;2420130500816</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M90.57,-141.71C113.63,-131.07 142.19,-116.69 166.01,-101.01 173.1,-96.34 180.28,-91 187.15,-85.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"189.12,-87.61 194.64,-78.57 184.69,-82.19 189.12,-87.61\"/>\n",
       "<text text-anchor=\"middle\" x=\"139.01\" y=\"-133.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.1000</text>\n",
       "</g>\n",
       "<!-- 2420123789072 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>2420123789072</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-47.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-41.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420123789072&#45;&gt;2420130501200 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>2420123789072&#45;&gt;2420130501200</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M92.82,-58.84C120.78,-66.73 153.71,-77.11 166.01,-85.26 169.74,-87.72 181.26,-100.68 193.52,-115.05\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"191.23,-116.76 200.36,-122.13 196.57,-112.24 191.23,-116.76\"/>\n",
       "<text text-anchor=\"middle\" x=\"139.01\" y=\"-87.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.6000</text>\n",
       "</g>\n",
       "<!-- 2420123789072&#45;&gt;2420130500816 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2420123789072&#45;&gt;2420130500816</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M94.5,-46.4C100.39,-46.34 106.34,-46.29 112.01,-46.26 136.01,-46.12 142.01,-46.12 166.01,-46.26 168.23,-46.27 170.48,-46.28 172.76,-46.3\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"172.49,-49.81 182.52,-46.4 172.55,-42.81 172.49,-49.81\"/>\n",
       "<text text-anchor=\"middle\" x=\"139.01\" y=\"-48.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.8000</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.graphs.Digraph at 0x2337aff7110>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NN = nerualNetwork(2,[2],1,\"Sigmoid\",\"MSE\",0)\n",
    "x = 0.8\n",
    "NN.inputs[0].children[0].parents[0][1] = 0.1\n",
    "NN.inputs[0].children[0].parents[1][1] = 0.8\n",
    "NN.inputs[0].children[1].parents[0][1] = 0.4\n",
    "NN.inputs[0].children[1].parents[1][1] = 0.6\n",
    "NN.inputs[0].children[0].children[0].parents[0][1] = 0.3\n",
    "NN.inputs[0].children[0].children[0].parents[1][1] = 0.9\n",
    "draw_dot(NN.inputs)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 8.1.0 (20230707.0739)\n",
       " -->\n",
       "<!-- Pages: 1 -->\n",
       "<svg width=\"470pt\" height=\"215pt\"\n",
       " viewBox=\"0.00 0.00 470.04 215.01\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 211.01)\">\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-211.01 466.04,-211.01 466.04,4 -4,4\"/>\n",
       "<!-- 2420130501200 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>2420130501200</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"231.02\" cy=\"-159.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"231.02\" y=\"-153.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.6637</text>\n",
       "</g>\n",
       "<!-- 2420130046672 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>2420130046672</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"415.03\" cy=\"-102.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"415.03\" y=\"-96.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.6903</text>\n",
       "</g>\n",
       "<!-- 2420130501200&#45;&gt;2420130046672 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>2420130501200&#45;&gt;2420130046672</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M276.08,-145.21C301.16,-137.35 332.78,-127.45 359.43,-119.11\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"360.25,-122.2 368.74,-115.87 358.16,-115.52 360.25,-122.2\"/>\n",
       "<text text-anchor=\"middle\" x=\"323.02\" y=\"-140.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.9000</text>\n",
       "</g>\n",
       "<!-- 2420130500816 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>2420130500816</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"231.02\" cy=\"-47.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"231.02\" y=\"-41.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.6803</text>\n",
       "</g>\n",
       "<!-- 2420130500816&#45;&gt;2420130046672 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>2420130500816&#45;&gt;2420130046672</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M276.54,-60.46C301.54,-68.01 332.92,-77.5 359.39,-85.5\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"358.06,-89.05 368.65,-88.6 360.09,-82.35 358.06,-89.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"323.02\" y=\"-84.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.3000</text>\n",
       "</g>\n",
       "<!-- 2420130193616 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2420130193616</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-160.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-154.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.3500</text>\n",
       "</g>\n",
       "<!-- 2420130193616&#45;&gt;2420130501200 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>2420130193616&#45;&gt;2420130501200</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M94.41,-159.75C118.26,-159.62 147.55,-159.46 172.79,-159.32\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"172.72,-162.82 182.7,-159.26 172.68,-155.82 172.72,-162.82\"/>\n",
       "<text text-anchor=\"middle\" x=\"139.01\" y=\"-161.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.4000</text>\n",
       "</g>\n",
       "<!-- 2420130193616&#45;&gt;2420130500816 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>2420130193616&#45;&gt;2420130500816</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M90.57,-141.71C113.63,-131.07 142.19,-116.69 166.01,-101.01 173.1,-96.34 180.28,-91 187.15,-85.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"189.12,-87.61 194.64,-78.57 184.69,-82.19 189.12,-87.61\"/>\n",
       "<text text-anchor=\"middle\" x=\"139.01\" y=\"-133.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.1000</text>\n",
       "</g>\n",
       "<!-- 2420123789072 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>2420123789072</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-47.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-41.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.9000</text>\n",
       "</g>\n",
       "<!-- 2420123789072&#45;&gt;2420130501200 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>2420123789072&#45;&gt;2420130501200</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M92.82,-58.84C120.78,-66.73 153.71,-77.11 166.01,-85.26 169.74,-87.72 181.26,-100.68 193.52,-115.05\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"191.23,-116.76 200.36,-122.13 196.57,-112.24 191.23,-116.76\"/>\n",
       "<text text-anchor=\"middle\" x=\"139.01\" y=\"-87.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.6000</text>\n",
       "</g>\n",
       "<!-- 2420123789072&#45;&gt;2420130500816 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2420123789072&#45;&gt;2420130500816</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M94.5,-46.4C100.39,-46.34 106.34,-46.29 112.01,-46.26 136.01,-46.12 142.01,-46.12 166.01,-46.26 168.23,-46.27 170.48,-46.28 172.76,-46.3\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"172.49,-49.81 182.52,-46.4 172.55,-42.81 172.49,-49.81\"/>\n",
       "<text text-anchor=\"middle\" x=\"139.01\" y=\"-48.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.8000</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.graphs.Digraph at 0x2337aef9650>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(NN.forwardProp([0.35,0.9],[]))\n",
    "draw_dot(NN.inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 8.1.0 (20230707.0739)\n",
       " -->\n",
       "<!-- Pages: 1 -->\n",
       "<svg width=\"479pt\" height=\"326pt\"\n",
       " viewBox=\"0.00 0.00 479.04 326.01\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 322.01)\">\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-322.01 475.04,-322.01 475.04,4 -4,4\"/>\n",
       "<!-- 2420130496592 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>2420130496592</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"424.03\" cy=\"-148.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"424.03\" y=\"-142.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130498640 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>2420130498640</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-159.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-153.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130503312 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2420130503312</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"235.52\" cy=\"-93.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"235.52\" y=\"-87.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130498640&#45;&gt;2420130503312 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>2420130498640&#45;&gt;2420130503312</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M83.43,-128.6C92.28,-122.32 102.1,-116.37 112.01,-112.26 132.5,-103.75 156.34,-98.98 177.52,-96.3\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"177.77,-99.69 187.32,-95.09 176.99,-92.73 177.77,-99.69\"/>\n",
       "<text text-anchor=\"middle\" x=\"141.26\" y=\"-115.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.1562</text>\n",
       "</g>\n",
       "<!-- 2420130503376 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>2420130503376</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"235.52\" cy=\"-205.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"235.52\" y=\"-199.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130498640&#45;&gt;2420130503376 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>2420130498640&#45;&gt;2420130503376</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M93.16,-170.14C118.95,-176.5 151.5,-184.53 178.87,-191.28\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"177.91,-194.9 188.46,-193.89 179.59,-188.1 177.91,-194.9\"/>\n",
       "<text text-anchor=\"middle\" x=\"141.26\" y=\"-190.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.9404</text>\n",
       "</g>\n",
       "<!-- 2420130503312&#45;&gt;2420130496592 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>2420130503312&#45;&gt;2420130496592</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M280.72,-106.04C306.89,-113.76 340.27,-123.6 368.12,-131.81\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"366.92,-135.4 377.5,-134.87 368.9,-128.69 366.92,-135.4\"/>\n",
       "<text text-anchor=\"middle\" x=\"329.77\" y=\"-131.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.9469</text>\n",
       "</g>\n",
       "<!-- 2420130503376&#45;&gt;2420130496592 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>2420130503376&#45;&gt;2420130496592</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M280.72,-191.5C306.99,-183.47 340.51,-173.22 368.43,-164.69\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"369.28,-167.79 377.82,-161.52 367.24,-161.09 369.28,-167.79\"/>\n",
       "<text text-anchor=\"middle\" x=\"329.77\" y=\"-186.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.6023</text>\n",
       "</g>\n",
       "<!-- 2420130498832 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>2420130498832</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-271.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-265.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130498832&#45;&gt;2420130503312 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>2420130498832&#45;&gt;2420130503312</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M85.63,-243.58C94.07,-238.08 103.16,-232.66 112.01,-228.26 136.65,-216.02 151.42,-227.82 170.51,-208.01 189.53,-188.26 175.56,-173.17 188.51,-149.01 190.88,-144.59 193.62,-140.2 196.56,-135.93\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"199.75,-138.49 202.83,-128.36 194.1,-134.36 199.75,-138.49\"/>\n",
       "<text text-anchor=\"middle\" x=\"141.26\" y=\"-230.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.7844</text>\n",
       "</g>\n",
       "<!-- 2420130498832&#45;&gt;2420130503376 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>2420130498832&#45;&gt;2420130503376</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M94.06,-266.84C117.59,-263.61 146.28,-257.93 170.51,-248.01 176.61,-245.51 182.73,-242.38 188.64,-238.96\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"190.02,-241.61 196.71,-233.39 186.36,-235.64 190.02,-241.61\"/>\n",
       "<text text-anchor=\"middle\" x=\"141.26\" y=\"-265.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.8261</text>\n",
       "</g>\n",
       "<!-- 2420130503120 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>2420130503120</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-47.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-41.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2420130503120&#45;&gt;2420130503312 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2420130503120&#45;&gt;2420130503312</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M93.81,-53.37C117.01,-57.08 145.49,-62.4 170.51,-69.26 174.05,-70.23 177.66,-71.31 181.29,-72.46\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"179.88,-76.01 190.47,-75.86 182.1,-69.37 179.88,-76.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"141.26\" y=\"-72.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.5627</text>\n",
       "</g>\n",
       "<!-- 2420130503120&#45;&gt;2420130503376 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>2420130503120&#45;&gt;2420130503376</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M78.05,-82.88C83.44,-89.51 88.95,-96.42 94.01,-103.01 102.36,-113.86 101.46,-119.28 112.01,-128.01 134.11,-146.29 146.03,-140.3 170.51,-155.26 177.12,-159.29 183.84,-163.89 190.32,-168.62\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"187.88,-171.92 197.98,-175.12 192.08,-166.32 187.88,-171.92\"/>\n",
       "<text text-anchor=\"middle\" x=\"141.26\" y=\"-157.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.0107</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.graphs.Digraph at 0x2337b04c810>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ANDgateModel = nerualNetwork(3,[2],1,\"Sigmoid\",\"CrossEntropy\",1)\n",
    "draw_dot(ANDgateModel.inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weights from inputs to hidden layer:\n",
      "0.7843591354096908\n",
      "-0.8261223347411677\n",
      "-0.15615636062945915\n",
      "-0.9404055611238593\n",
      "-0.5627240503927933\n",
      "0.010710576206724776\n",
      "Weights from hidden layer to output layer:\n",
      "-0.9469280606322728\n",
      "-0.602324698626703\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 8.1.0 (20230707.0739)\n",
       " -->\n",
       "<!-- Pages: 1 -->\n",
       "<svg width=\"551pt\" height=\"398pt\"\n",
       " viewBox=\"0.00 0.00 551.29 398.10\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 394.1)\">\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-394.1 547.29,-394.1 547.29,4 -4,4\"/>\n",
       "<!-- 2420130750032 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>2420130750032</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"271.64\" cy=\"-93.05\" rx=\"59.05\" ry=\"59.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"271.64\" y=\"-87.62\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.2286</text>\n",
       "</g>\n",
       "<!-- 2420153197456 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>2420153197456</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"484.24\" cy=\"-160.05\" rx=\"59.05\" ry=\"59.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"484.24\" y=\"-154.62\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.4365</text>\n",
       "</g>\n",
       "<!-- 2420130750032&#45;&gt;2420153197456 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>2420130750032&#45;&gt;2420153197456</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M328.25,-110.74C355.6,-119.44 388.75,-129.99 417.37,-139.09\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"416.1,-142.68 426.69,-142.37 418.22,-136.01 416.1,-142.68\"/>\n",
       "<text text-anchor=\"middle\" x=\"377.94\" y=\"-137.5\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.9469</text>\n",
       "</g>\n",
       "<!-- 2420153194768 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2420153194768</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"271.64\" cy=\"-229.05\" rx=\"59.05\" ry=\"59.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"271.64\" y=\"-223.62\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0645</text>\n",
       "</g>\n",
       "<!-- 2420153194768&#45;&gt;2420153197456 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>2420153194768&#45;&gt;2420153197456</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M328.25,-210.83C355.6,-201.87 388.75,-191 417.37,-181.63\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"418.27,-184.69 426.69,-178.25 416.09,-178.04 418.27,-184.69\"/>\n",
       "<text text-anchor=\"middle\" x=\"377.94\" y=\"-204.5\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.6023</text>\n",
       "</g>\n",
       "<!-- 2420153195792 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>2420153195792</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"59.05\" cy=\"-195.05\" rx=\"59.05\" ry=\"59.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"59.05\" y=\"-189.62\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 3.0000</text>\n",
       "</g>\n",
       "<!-- 2420153195792&#45;&gt;2420130750032 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>2420153195792&#45;&gt;2420130750032</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M98.67,-151.1C109.82,-140.64 122.63,-130.46 136.1,-123.3 156.26,-112.57 180.08,-105.64 202.03,-101.17\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"202.45,-104.46 211.63,-99.16 201.15,-97.58 202.45,-104.46\"/>\n",
       "<text text-anchor=\"middle\" x=\"165.35\" y=\"-126.5\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.5627</text>\n",
       "</g>\n",
       "<!-- 2420153195792&#45;&gt;2420153194768 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>2420153195792&#45;&gt;2420153194768</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M117.59,-204.34C143.83,-208.57 175.08,-213.62 202.48,-218.04\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"201.74,-221.63 212.17,-219.77 202.85,-214.72 201.74,-221.63\"/>\n",
       "<text text-anchor=\"middle\" x=\"165.35\" y=\"-218.5\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.0107</text>\n",
       "</g>\n",
       "<!-- 2420153111376 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>2420153111376</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"59.05\" cy=\"-331.05\" rx=\"59.05\" ry=\"59.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"59.05\" y=\"-325.62\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 1.0000</text>\n",
       "</g>\n",
       "<!-- 2420153111376&#45;&gt;2420130750032 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2420153111376&#45;&gt;2420130750032</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M105.08,-293.33C115.09,-285.44 125.79,-277.38 136.1,-270.3 160.93,-253.24 176.64,-260.24 194.6,-236.05 215.02,-208.52 197.04,-191.59 212.6,-161.05 215.6,-155.15 219.22,-149.33 223.15,-143.72\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"226.4,-146.22 229.57,-136.11 220.79,-142.04 226.4,-146.22\"/>\n",
       "<text text-anchor=\"middle\" x=\"165.35\" y=\"-272.5\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: 0.7844</text>\n",
       "</g>\n",
       "<!-- 2420153111376&#45;&gt;2420153194768 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>2420153111376&#45;&gt;2420153194768</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M117.25,-318.76C141.89,-312.18 170.52,-302.76 194.6,-290.05 202.84,-285.69 211.06,-280.39 218.87,-274.75\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"220.28,-277.32 226.19,-268.52 216.08,-271.71 220.28,-277.32\"/>\n",
       "<text text-anchor=\"middle\" x=\"165.35\" y=\"-314.5\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.8261</text>\n",
       "</g>\n",
       "<!-- 2420153196432 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>2420153196432</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"59.05\" cy=\"-59.05\" rx=\"59.05\" ry=\"59.05\"/>\n",
       "<text text-anchor=\"middle\" x=\"59.05\" y=\"-53.62\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 2.0000</text>\n",
       "</g>\n",
       "<!-- 2420153196432&#45;&gt;2420130750032 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>2420153196432&#45;&gt;2420130750032</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M117.72,-67.35C141.55,-70.87 169.43,-75.13 194.6,-79.3 197.26,-79.74 199.97,-80.2 202.72,-80.66\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"201.92,-84.25 212.37,-82.51 203.11,-77.35 201.92,-84.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"165.35\" y=\"-82.5\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.1562</text>\n",
       "</g>\n",
       "<!-- 2420153196432&#45;&gt;2420153194768 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>2420153196432&#45;&gt;2420153194768</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M98.65,-103.15C110.18,-115.33 123.2,-128.18 136.1,-139.05 159.44,-158.72 187.2,-177.9 211.42,-193.46\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"209.2,-196.83 219.52,-199.25 212.95,-190.93 209.2,-196.83\"/>\n",
       "<text text-anchor=\"middle\" x=\"165.35\" y=\"-183.5\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;0.9404</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.graphs.Digraph at 0x2337c5f2150>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CustomNN = ANDgateModel.copy()\n",
    "CustomNN.print_weights()\n",
    "CustomNN.forwardProp([1, 2, 3],[[0]])\n",
    "CustomNN.draw_dot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "h1:  0.3276395716853663\n",
      "h2:  0.28298659955175\n",
      "Output from forward propagation: 0.382086626256674\n",
      "Updated weights from input to hidden layer: -0.5608364059812956 0.7843591354096908 -0.15426871621796143 0.011817739916365935 -0.8261223347411677 -0.9392983974142182\n",
      "Updated weights from hidden layer to output layer: -0.9498836739727137 -0.6048775006722519\n"
     ]
    }
   ],
   "source": [
    "def sigmoid(x):\n",
    "    return 1 / (1 + np.exp(-x))\n",
    "\n",
    "def sigmoid_derivative(x):\n",
    "    return x * (1 - x)\n",
    "\n",
    "bias = 0\n",
    "# Inputs\n",
    "x1, x2, x3 = 1, 0, 1\n",
    "\n",
    "# Weights to hidden layer\n",
    "w21 =0.7843591354096908\n",
    "w22 = -0.8261223347411677\n",
    "w31 = -0.15615636062945915\n",
    "w32 = -0.9404055611238593\n",
    "w11 =-0.5627240503927933\n",
    "w12 =0.010710576206724776\n",
    "\n",
    "# Weights to output layer\n",
    "v1 =-0.9469280606322728\n",
    "v2 =-0.602324698626703\n",
    "\n",
    "# Learning rate\n",
    "lr = 0.1\n",
    "\n",
    "# Calculate hidden layer values\n",
    "z1 = w11*x1 + w21*x2 + w31*x3 + bias\n",
    "h1 = sigmoid(z1)\n",
    "print(\"h1: \", h1)\n",
    "\n",
    "z2 = w12*x1 + w22*x2 + w32*x3 + bias\n",
    "h2 = sigmoid(z2)\n",
    "print(\"h2: \", h2)\n",
    "\n",
    "# Calculate output value\n",
    "z3 = v1*h1 + v2*h2\n",
    "y = sigmoid(z3)\n",
    "\n",
    "print('Output from forward propagation:', y)\n",
    "\n",
    "# Assume t is the target output\n",
    "t = 0\n",
    "\n",
    "# Calculate output error\n",
    "delta_y = (y - t) * sigmoid_derivative(y)\n",
    "\n",
    "# Update weights from hidden layer to output layer\n",
    "v1 -= lr * delta_y * h1\n",
    "v2 -= lr * delta_y * h2\n",
    "\n",
    "# Calculate hidden layer errors\n",
    "delta_h1 = delta_y * v1 * sigmoid_derivative(h1)\n",
    "delta_h2 = delta_y * v2 * sigmoid_derivative(h2)\n",
    "\n",
    "# Update weights from input to hidden layer\n",
    "w11 -= lr * delta_h1 * x1\n",
    "w21 -= lr * delta_h1 * x2\n",
    "w31 -= lr * delta_h1 * x3\n",
    "\n",
    "w12 -= lr * delta_h2 * x1\n",
    "w22 -= lr * delta_h2 * x2\n",
    "w32 -= lr * delta_h2 * x3\n",
    "\n",
    "print('Updated weights from input to hidden layer:', w11, w21, w31, w12, w22, w32)\n",
    "print('Updated weights from hidden layer to output layer:', v1, v2)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xs = [\n",
    "  [0, 0, 0],\n",
    "  [0, 0, 1],\n",
    "  [0, 1, 0],\n",
    "  [0, 1, 1],\n",
    "  [1, 0, 0],\n",
    "  [1, 0, 1],\n",
    "  [1, 1, 0],\n",
    "  [1, 1, 1],\n",
    "]\n",
    "ys = [[0],[0],[0],[1],[1],[0],[0],[1]] # desired targets\n",
    "\n",
    "xy = ANDgateModel.train(xs, ys, 0.1, 2000)\n",
    "\n",
    "# Separate the loss and time values\n",
    "x = [obj[1] for obj in xy]  # time values\n",
    "y = [obj[0] for obj in xy]  # loss values\n",
    "\n",
    "# Create the plot\n",
    "fig, axs = plt.subplots(figsize=(5, 5))  # no need to specify 1, 1 for a single plot\n",
    "axs.set_title('Training Loss Graph')\n",
    "axs.set_ylabel('% error')\n",
    "axs.set_xlabel('time in mili-second')\n",
    "axs.plot(x, y)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predict: 0.000, TrueVal: 0\n",
      "Predict: 0.500, TrueVal: 0\n",
      "Predict: 0.500, TrueVal: 0\n",
      "Predict: 0.500, TrueVal: 1\n",
      "Predict: 0.500, TrueVal: 1\n",
      "Predict: 0.500, TrueVal: 0\n",
      "Predict: 0.500, TrueVal: 0\n",
      "Predict: 0.500, TrueVal: 1\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 8.1.0 (20230707.0739)\n",
       " -->\n",
       "<!-- Pages: 1 -->\n",
       "<svg width=\"499pt\" height=\"326pt\"\n",
       " viewBox=\"0.00 0.00 499.29 326.01\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 322.01)\">\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-322.01 495.29,-322.01 495.29,4 -4,4\"/>\n",
       "<!-- 2890128782928 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>2890128782928</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"242.27\" cy=\"-93.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"242.27\" y=\"-87.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2890128778960 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2890128778960</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"444.28\" cy=\"-148.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"444.28\" y=\"-142.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.5000</text>\n",
       "</g>\n",
       "<!-- 2890128782928&#45;&gt;2890128778960 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>2890128782928&#45;&gt;2890128778960</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M287.66,-105.21C317.33,-113.37 356.59,-124.17 388.25,-132.87\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"387.1,-136.46 397.67,-135.74 388.96,-129.71 387.1,-136.46\"/>\n",
       "<text text-anchor=\"middle\" x=\"343.27\" y=\"-133.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;149.6391</text>\n",
       "</g>\n",
       "<!-- 2890128775760 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>2890128775760</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"242.27\" cy=\"-205.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"242.27\" y=\"-199.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 0.0000</text>\n",
       "</g>\n",
       "<!-- 2890128775760&#45;&gt;2890128778960 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>2890128775760&#45;&gt;2890128778960</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M287.66,-192.36C317.33,-183.9 356.59,-172.71 388.25,-163.69\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"389.01,-166.83 397.67,-160.72 387.09,-160.09 389.01,-166.83\"/>\n",
       "<text text-anchor=\"middle\" x=\"343.27\" y=\"-188.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;149.2945</text>\n",
       "</g>\n",
       "<!-- 2890128777936 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>2890128777936</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-159.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-153.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 1.0000</text>\n",
       "</g>\n",
       "<!-- 2890128777936&#45;&gt;2890128782928 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>2890128777936&#45;&gt;2890128782928</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M83.4,-128.54C92.26,-122.26 102.08,-116.33 112.01,-112.26 134.66,-102.96 161.18,-98.08 184.29,-95.55\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"184.36,-98.96 193.98,-94.51 183.69,-91.99 184.36,-98.96\"/>\n",
       "<text text-anchor=\"middle\" x=\"144.64\" y=\"-115.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;27.2445</text>\n",
       "</g>\n",
       "<!-- 2890128777936&#45;&gt;2890128775760 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2890128777936&#45;&gt;2890128775760</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M92.83,-169.67C120.44,-176.25 156.06,-184.72 185.48,-191.73\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"184.48,-195.32 195.02,-194.24 186.1,-188.52 184.48,-195.32\"/>\n",
       "<text text-anchor=\"middle\" x=\"144.64\" y=\"-190.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;26.6701</text>\n",
       "</g>\n",
       "<!-- 2890128778576 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>2890128778576</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-271.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-265.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 1.0000</text>\n",
       "</g>\n",
       "<!-- 2890128778576&#45;&gt;2890128782928 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>2890128778576&#45;&gt;2890128782928</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M85.53,-243.36C93.97,-237.88 103.09,-232.51 112.01,-228.26 139.42,-215.19 155.84,-229.53 177.26,-208.01 196.6,-188.57 182.31,-173.17 195.26,-149.01 197.63,-144.59 200.37,-140.2 203.31,-135.93\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"206.5,-138.49 209.58,-128.36 200.85,-134.36 206.5,-138.49\"/>\n",
       "<text text-anchor=\"middle\" x=\"144.64\" y=\"-230.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;26.3040</text>\n",
       "</g>\n",
       "<!-- 2890128778576&#45;&gt;2890128775760 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>2890128778576&#45;&gt;2890128775760</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M94.15,-267.48C119.41,-264.41 150.84,-258.68 177.26,-248.01 183.37,-245.54 189.5,-242.43 195.41,-239.02\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"196.79,-241.67 203.49,-233.46 193.13,-235.7 196.79,-241.67\"/>\n",
       "<text text-anchor=\"middle\" x=\"144.64\" y=\"-266.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;26.5558</text>\n",
       "</g>\n",
       "<!-- 2890128773968 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>2890128773968</title>\n",
       "<ellipse fill=\"none\" stroke=\"black\" cx=\"47.01\" cy=\"-47.01\" rx=\"47.01\" ry=\"47.01\"/>\n",
       "<text text-anchor=\"middle\" x=\"47.01\" y=\"-41.58\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value: 1.0000</text>\n",
       "</g>\n",
       "<!-- 2890128773968&#45;&gt;2890128782928 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>2890128773968&#45;&gt;2890128782928</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M93.92,-52.8C118.82,-56.47 150,-61.92 177.26,-69.26 180.8,-70.21 184.42,-71.28 188.05,-72.42\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"186.64,-75.98 197.24,-75.81 188.85,-69.33 186.64,-75.98\"/>\n",
       "<text text-anchor=\"middle\" x=\"144.64\" y=\"-72.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;27.6511</text>\n",
       "</g>\n",
       "<!-- 2890128773968&#45;&gt;2890128775760 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>2890128773968&#45;&gt;2890128775760</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M78.05,-82.88C83.44,-89.51 88.95,-96.42 94.01,-103.01 102.36,-113.86 101.29,-119.49 112.01,-128.01 136.62,-147.55 150.12,-139.42 177.26,-155.26 183.95,-159.16 190.72,-163.68 197.22,-168.37\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"194.79,-171.67 204.9,-174.84 198.97,-166.06 194.79,-171.67\"/>\n",
       "<text text-anchor=\"middle\" x=\"144.64\" y=\"-157.46\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">w: &#45;25.7190</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.graphs.Digraph at 0x2a0e923ce10>"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(len(xs)):\n",
    "    print('Predict: %0.3f, TrueVal: %d'%(ANDgateModel.predict(xs[i])[0], ys[i][0]))\n",
    "draw_dot(ANDgateModel.inputs)\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
